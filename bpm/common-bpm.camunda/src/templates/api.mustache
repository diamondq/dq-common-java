package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{#useSwaggerAnnotations}}
  import io.swagger.annotations.*;
{{/useSwaggerAnnotations}}
{{#supportAsync}}
  import java.util.concurrent.CompletionStage;
  import java.util.concurrent.CompletableFuture;
{{/supportAsync}}

import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Consumes;
import io.micronaut.http.annotation.Delete;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Header;
import io.micronaut.http.annotation.Options;
import io.micronaut.http.annotation.Part;
import io.micronaut.http.annotation.Patch;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Produces;
import io.micronaut.http.annotation.Put;
import io.micronaut.http.annotation.QueryValue;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.retry.annotation.Retryable;
import org.jetbrains.annotations.NotNull;

import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Optional;
{{#useBeanValidation}}import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;
import io.micronaut.core.annotation.Nullable;{{/useBeanValidation}}
import com.diamondq.common.injection.micronaut.auth.AuthInfo;
import com.diamondq.common.bpm.camunda.CamundaRetryPredicate;

{{#appDescriptionWithNewLines}}/**
* {{appDescriptionWithNewLines}}
*/{{/appDescriptionWithNewLines}}
@Client(id="{{serviceDiscoveryId}}", path="{{contextPath}}")
{{#useSwaggerAnnotations}}
  @Api(description = "the {{{baseName}}} API"){{/useSwaggerAnnotations}}{{#hasConsumes}}
  @Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
  @Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}
@Retryable(predicate=CamundaRetryPredicate.class)
{{>generatedAnnotation}}
public {{#interfaceOnly}}interface{{/interfaceOnly}}{{^interfaceOnly}}class{{/interfaceOnly}} {{classname}} {
{{#operations}}
  {{#operation}}

    {{#interfaceOnly}}{{>apiInterface}}{{/interfaceOnly}}{{^interfaceOnly}}{{>apiMethod}}{{/interfaceOnly}}
  {{/operation}}
  }
{{/operations}}